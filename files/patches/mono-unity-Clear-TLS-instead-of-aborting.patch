Rediffed against 6.6.0.161 with condition improved based on feedback
from Ignacio Etcheverry.

From 995768f7dc3af7b3d19fcedd1244087a4a89bc5c Mon Sep 17 00:00:00 2001
From: Josh Peterson <petersonjm1@gmail.com>
Date: Tue, 30 Aug 2016 14:47:30 -0400
Subject: [PATCH] Clear TLS instead of aborting

Often in Unity native code will attach to a managed thread, detach, then
attach again. This occurs most regularly in the audio code. Whent this
happens the debugger thread local storage will already be allocated for
the thread. This is acceptable, so instead of asserting, we clear the
previous thread local storage and create a new one.

This was originally changed in the Unity fork at: https://github.com/Unity-Technologies/mono/commit/70736c0c548af244d2a16c39790f32711fefee5b
---
 mono/mini/debugger-agent.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/mono/mini/debugger-agent.c b/mono/mini/debugger-agent.c
index df6329391df..05f30d5b4dc 100644
--- a/mono/mini/debugger-agent.c
+++ b/mono/mini/debugger-agent.c
@@ -4088,8 +4088,12 @@ thread_startup (MonoProfiler *prof, uintptr_t tid)
 	}
 
 	tls = (DebuggerTlsData *)mono_native_tls_get_value (debugger_tls_id);
-	g_assert (!tls);
-	// FIXME: Free this somewhere
+	if (tls) {
+		if (!tls->terminated) {
+			MONO_GC_UNREGISTER_ROOT(tls->thread);
+		}
+		g_free (tls);
+	}
 	tls = g_new0 (DebuggerTlsData, 1);
 	MONO_GC_REGISTER_ROOT_SINGLE (tls->thread, MONO_ROOT_SOURCE_DEBUGGER, NULL, "Debugger Thread Reference");
 	tls->thread = thread;
